.program ws2812
.side_set 1            ; sideset pin = LED data pin

.define public T1 2    ; WS2812 timing in PIO cycles (for 800 kHz)
.define public T2 5
.define public T3 3

.wrap_target
bitloop:
    out x, 1           side 0 [T3-1]   ; shift next bit into X (MSB-first)
    jmp !x do_zero     side 1 [T1-1]   ; if bit=1 keep high longer
do_one:
    jmp bitloop        side 1 [T2-1]
do_zero:
    nop                side 0 [T2-1]
    jmp bitloop        side 0
.wrap

% c-sdk {
#include "hardware/clocks.h"
static inline void ws2812_program_init(PIO pio, uint sm, uint offset,
                                       uint pin, float freq_hz, bool rgbw) {
    pio_sm_config c = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 24); // left, autopull
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    const float cycles_per_bit = (float)(ws2812_T1 + ws2812_T2 + ws2812_T3);
    float div = (float)clock_get_hz(clk_sys) / (freq_hz * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
